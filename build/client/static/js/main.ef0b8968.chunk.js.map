{"version":3,"sources":["WeatherApp/Components/WeatherDataCards/WeatherDataCards.js","WeatherApp/WeatherApp.js","WeatherApp/Components/NavBar/NavBar.js","WeatherApp/Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDataCards","className","this","props","data","temp","weather","description","pres","uv","wind_cdir","wind_spd","precip","vis","aqi","rh","slp","clouds","React","Component","WeatherApp","getWeather","city","a","base","fetch","response","json","state","weatherData","stage","setState","document","getElementById","value","then","catch","err","body","type","id","placeholder","onClick","callAPI","NavBar","href","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.ef0b8968.chunk.js","sourcesContent":["import React from 'react';\r\nimport './WeatherDataCards.css';\r\n\r\nclass WeatherDataCards extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"data-box\">\r\n                <div className=\"row\">\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Temperature</h2>\r\n                            <p>{this.props.data.temp} Â°C</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Weather Conditions</h2>\r\n                            <p>{this.props.data.weather.description}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Pressure</h2>\r\n                            <p>{this.props.data.pres}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>UV</h2>\r\n                            <p>{this.props.data.uv}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Wind Direction</h2>\r\n                            <p>{this.props.data.wind_cdir}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Wind Speed</h2>\r\n                            <p>{this.props.data.wind_spd} m/s</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Precipitation</h2>\r\n                            <p>{this.props.data.precip} mm/hr</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Visibility</h2>\r\n                            <p>{this.props.data.vis} KM</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Air Quality Index</h2>\r\n                            <p>{this.props.data.aqi}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Relative Humidity</h2>\r\n                            <p>{this.props.data.rh}%</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Sea Level Pressure</h2>\r\n                            <p>{this.props.data.slp} mb</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <div className=\"card\">\r\n                            <h2>Cloud Coverage</h2>\r\n                            <p>{this.props.data.clouds}%</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherDataCards;","import React from 'react';\r\nimport WeatherDataCards from './Components/WeatherDataCards/WeatherDataCards';\r\nimport './WeatherApp.css';\r\n\r\nclass WeatherApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            weatherData: {},\r\n            stage: 0\r\n        };\r\n    }\r\n\r\n    getWeather = async (city) => {\r\n\r\n        const base = \"https://abracadabrant-choucroute-66376.herokuapp.com/weather?city=\" + city;\r\n        const response = await fetch(base);\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n\r\n    callAPI() {\r\n        this.setState({stage: 1 });\r\n        this.getWeather(document.getElementById('cityInput').value).then((data) => {\r\n            this.setState({ weatherData: data, stage: 2 });\r\n        })\r\n        .catch( err => {\r\n            this.setState({ stage: -1 });\r\n        });\r\n    }\r\n\r\n    \r\n    render() {\r\n        let body = null;\r\n        if (this.state.stage === 0) {\r\n            body = (\r\n                <div className=\"msg\">Type in the city name.</div>\r\n            )\r\n        }\r\n        else if(this.state.stage === 1){\r\n            body = (\r\n                <div className=\"loading\">\r\n                    Loading....\r\n                </div>\r\n            )\r\n        }\r\n        else if(this.state.stage === 2){\r\n            if (!this.state.weatherData.err) {\r\n                body = (\r\n                    <WeatherDataCards data = {this.state.weatherData.data}/>\r\n                );\r\n            }\r\n        }\r\n        else{\r\n            body = (\r\n                <div className = \"err-msg\">\r\n                    Server Error!\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"header\">\r\n                    <input type=\"text\" className=\"search-box\" id=\"cityInput\" placeholder = \"Enter city\"></input>\r\n                    &nbsp;<button onClick = {() => this.callAPI()}>Search</button>\r\n                </div>\r\n                {body}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default WeatherApp;","import React from 'react';\r\nimport './NavBar.css';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className = \"navbar\">\r\n                <ul>\r\n                    <li><b>WEATHER</b> MAN</li>\r\n                    <li><a href = \"/\"><button>Home</button></a></li>\r\n                    <li><a href = \"https://github.com/nvkex/weatherman-react/\"><button>Github</button></a></li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className = \"footer\">\r\n                <p>v1.0 | Made by <a href = \"https://github.com/nvkex\">Sumit Bhardwaj</a></p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport WeatherApp from './WeatherApp/WeatherApp';\n\nimport NavBar from './WeatherApp/Components/NavBar/NavBar';\nimport Footer from './WeatherApp/Components/Footer/Footer';\n\n\nfunction App() {\n  return (\n    <div>\n      <NavBar/>\n      <WeatherApp/>\n      <Footer/>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}